use std::env;
use std::path::PathBuf;

fn main() {
    let crate_dir = env::var("CARGO_MANIFEST_DIR").unwrap();
    let output_dir = target_dir();

    std::fs::create_dir_all(&output_dir).expect("Failed to create output directory");

    // 使用更简单的cbindgen配置
    let config = cbindgen::Config {
        language: cbindgen::Language::C,
        header: Some(
            "/* Rust PaddleOCR C API */\n/* This file is auto-generated by cbindgen */".to_string(),
        ),
        include_version: true,
        namespace: None,
        line_length: 100,
        tab_width: 4,
        documentation: true,
        documentation_style: cbindgen::DocumentationStyle::Doxy,
        export: cbindgen::ExportConfig {
            prefix: Some("ROCR_".to_string()),
            ..Default::default()
        },
        function: cbindgen::FunctionConfig {
            prefix: None,
            args: cbindgen::Layout::Vertical,
            rename_args: cbindgen::RenameRule::GeckoCase,
            ..Default::default()
        },
        structure: cbindgen::StructConfig {
            rename_fields: cbindgen::RenameRule::ScreamingSnakeCase,
            ..Default::default()
        },
        enumeration: cbindgen::EnumConfig {
            prefix_with_name: true,
            derive_helper_methods: true,
            ..Default::default()
        },
        ..Default::default()
    };

    match cbindgen::Builder::new()
        .with_crate(crate_dir)
        .with_config(config)
        .generate()
    {
        Ok(bindings) => {
            bindings.write_to_file(output_dir.join("rocr.h"));
            println!("cargo:rerun-if-changed=src/capi.rs");
            println!("cargo:rerun-if-changed=src/lib.rs");
        }
        Err(e) => {
            panic!("cbindgen failed to generate bindings: {:?}", e);
        }
    }
}

fn target_dir() -> PathBuf {
    PathBuf::from(env::var("CARGO_MANIFEST_DIR").unwrap())
}
