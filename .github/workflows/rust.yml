name: Rust

on:
  push:
    branches: [ "main" ]
    tags:
      - 'v*'
  pull_request:
    branches: [ "main" ]

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Build
        run: cargo build --verbose
      - name: Run tests
        run: cargo test --verbose

  release:
    name: Release
    needs: build
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          # amd64架构 - 两个版本
          - os: ubuntu-latest
            artifact_name: ocr
            asset_name: ocr-v4-linux-amd64
            target: x86_64-unknown-linux-gnu
            features: ""
          - os: ubuntu-latest
            artifact_name: ocr
            asset_name: ocr-v5-linux-amd64
            target: x86_64-unknown-linux-gnu
            features: "--features v5"
          - os: windows-latest
            artifact_name: ocr.exe
            asset_name: ocr-v4-windows-amd64.exe
            target: x86_64-pc-windows-msvc
            features: ""
          - os: windows-latest
            artifact_name: ocr.exe
            asset_name: ocr-v5-windows-amd64.exe
            target: x86_64-pc-windows-msvc
            features: "--features v5"
          - os: macos-latest
            artifact_name: ocr
            asset_name: ocr-v4-macos-amd64
            target: x86_64-apple-darwin
            features: ""
          - os: macos-latest
            artifact_name: ocr
            asset_name: ocr-v5-macos-amd64
            target: x86_64-apple-darwin
            features: "--features v5"
          
          # arm64架构 - 两个版本
          - os: ubuntu-latest
            artifact_name: ocr
            asset_name: ocr-v4-linux-arm64
            target: aarch64-unknown-linux-gnu
            features: ""
          - os: ubuntu-latest
            artifact_name: ocr
            asset_name: ocr-v5-linux-arm64
            target: aarch64-unknown-linux-gnu
            features: "--features v5"
          - os: macos-latest
            artifact_name: ocr
            asset_name: ocr-v4-macos-arm64
            target: aarch64-apple-darwin
            features: ""
          - os: macos-latest
            artifact_name: ocr
            asset_name: ocr-v5-macos-arm64
            target: aarch64-apple-darwin
            features: "--features v5"
          
          # 32位架构 - 两个版本
          - os: windows-latest
            artifact_name: ocr.exe
            asset_name: ocr-v4-windows-x86.exe
            target: i686-pc-windows-msvc
            features: ""
          - os: windows-latest
            artifact_name: ocr.exe
            asset_name: ocr-v5-windows-x86.exe
            target: i686-pc-windows-msvc
            features: "--features v5"
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
          target: ${{ matrix.target }}
      
      - name: Install LLVM and Clang (Windows)
        if: matrix.os == 'windows-latest'
        uses: KyleMayes/install-llvm-action@v1
        with:
          version: "18.0"
          directory: ${{ runner.temp }}/llvm
      
      - name: Set Windows Environment Variables
        if: matrix.os == 'windows-latest'
        run: |
          echo "LIBCLANG_PATH=${{ runner.temp }}/llvm/bin" >> $env:GITHUB_ENV
          echo "LLVM_CONFIG_PATH=${{ runner.temp }}/llvm/bin/llvm-config" >> $env:GITHUB_ENV
          echo "CC=clang" >> $env:GITHUB_ENV
          echo "CXX=clang++" >> $env:GITHUB_ENV
          echo "_CL_=/D_ALLOW_COMPILER_AND_STL_VERSION_MISMATCH" >> $env:GITHUB_ENV
        shell: pwsh
      
      - name: Install Cross-Compilation Dependencies
        if: contains(matrix.target, 'aarch64-unknown-linux-gnu')
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu g++-aarch64-linux-gnu
        shell: bash
      
      - name: Set Cross-Compilation Environment Variables
        if: contains(matrix.target, 'aarch64-unknown-linux-gnu')
        run: |
          echo "CC_aarch64_unknown_linux_gnu=aarch64-linux-gnu-gcc" >> $GITHUB_ENV
          echo "CXX_aarch64_unknown_linux_gnu=aarch64-linux-gnu-g++" >> $GITHUB_ENV
          echo "AR_aarch64_unknown_linux_gnu=aarch64-linux-gnu-ar" >> $GITHUB_ENV
          echo "CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=aarch64-linux-gnu-gcc" >> $GITHUB_ENV
        shell: bash
      
      - name: Build Release Binary
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release --bin ocr --target ${{ matrix.target }} ${{ matrix.features }}
        env:
          RUSTFLAGS: ${{ matrix.os == 'windows-latest' && '-C target-feature=+crt-static' || '' }}
      
      - name: Rename Binary
        shell: bash
        run: |
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            cp target/${{ matrix.target }}/release/${{ matrix.artifact_name }} ${{ matrix.asset_name }}
          else
            cp target/${{ matrix.target }}/release/${{ matrix.artifact_name }} ${{ matrix.asset_name }}
          fi
      
      - name: Upload Release Asset
        uses: softprops/action-gh-release@v1
        with:
          files: ${{ matrix.asset_name }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
